{"version":3,"sources":["connector.js"],"names":[],"mappings":"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","file":"connector.js","sourcesContent":["import logger from '@hoist/logger';\nimport config from 'config';\nimport Trello from 'node-trello';\nimport Bluebird from 'bluebird';\nimport url from 'url';\nimport {\n  OAuthConnectorBase\n}\nfrom '@hoist/oauth-connector';\nimport {\n  merge\n}\nfrom 'lodash';\n\nlet overrides = {\n  requestTokenUri: 'https://trello.com/1/OAuthGetRequestToken',\n  accessTokenUri: 'https://trello.com/1/OAuthGetAccessToken',\n  authorizationUri: 'https://trello.com/1/OAuthAuthorizeToken',\n  oauthVersion: '1.0'\n}\nlet baseUri = {\n  protocol: 'https',\n  hostname: 'api.trello.com'\n}\n\n/*\n * The main class for connecting to Trello\n * @extends {OAuthConnectorBase}\n */\nexport default class TrelloConnector extends OAuthConnectorBase {\n\n  /**\n   * create a new TrelloConnector\n   * @param {object} configuration - the configuration details for this connector\n   * @param {string} configuration.apiKey - the trello API Key\n   * @param {string} configuration.apiSecret - the trello API secret\n   * @param {string} configuration.appName - the application name as it should show up to the user in Trello\n   */\n  constructor(configuration) {\n    overrides.authorizationUri = `${overrides.authorizationUri}?name=${configuration.appName}&expiration=never&scope=read,write`\n    configuration.consumerKey = configuration.apiKey;\n    configuration.consumerSecret = configuration.apiSecret;\n    super(merge({}, configuration, overrides));\n    this._logger = logger.child({\n      cls: TrelloConnector\n    });\n  }\n\n\n  get(path, urlArguments) {\n    var uri = merge({}, {\n      pathname: path,\n      query: urlArguments\n    }, baseUri);\n    return this._performRequest('GET', url.format(uri), {}).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n  post(path, body) {\n    var uri = merge({}, {\n      pathname: path\n    }, baseUri);\n    return this._performRequest('POST', url.format(uri), body || {}).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n  put(path, body) {\n    var uri = merge({}, {\n      pathname: path\n    }, baseUri);\n    return this._performRequest('PUT', url.format(uri), body || {}).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n  delete(path) {\n    var uri = merge({}, {\n      pathname: path\n    }, baseUri);\n    return this._performRequest('DELETE', url.format(uri)).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n}\n"],"sourceRoot":"/source/"}
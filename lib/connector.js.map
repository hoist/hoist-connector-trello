{"version":3,"sources":["connector.js"],"names":[],"mappings":";;;;;;;;;;;;2BAAmB,eAAe;;;;sBACf,QAAQ;;;;0BACR,aAAa;;;;wBACX,UAAU;;;;;;;;;IAKV,eAAe;;;;;;;;;;AASvB,WATQ,eAAe,CAStB,aAAa,EAAE;0BATR,eAAe;;AAUhC,QAAI,CAAC,OAAO,GAAG,yBAAO,KAAK,CAAC;AAC1B,SAAG,EAAE,eAAe;KACrB,CAAC,CAAA;AACF,QAAI,CAAC,cAAc,GAAG,aAAa,CAAC;GACrC;;;;;;eAdkB,eAAe;;WAmBrB,uBAAC,aAAa,EAAE;;;AAC3B,UAAI,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;AAC/C,cAAQ,QAAQ;AAChB,aAAK,UAAU;AACb,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;AAC1C,iBAAO,OAAO,CAAC,GAAG,CAAC,CACf,aAAa,CAAC,GAAG,CAAC,WAAW,EAAE,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,EACzD,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC,CACzC,CAAC,CACD,IAAI,CAAC,YAAM;AACV,mBAAO,aAAa,CAAC,IAAI,EAAE,CAAC;WAC7B,CAAC,CAAC;AACL,gBAAM;AAAA,AACR;AACE,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;AAChD,iBAAO,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,UAAU,CAAC,CAChD,IAAI,CAAC,YAAM;AACV,mBAAO,aAAa,CAAC,QAAQ,uCAAqC,MAAK,cAAc,CAAC,MAAM,cAAS,kBAAkB,CAAC,MAAK,cAAc,CAAC,OAAO,CAAC,0EAAqE,kBAAkB,CAAC,UAAU,GAAC,oBAAO,GAAG,CAAC,uBAAuB,CAAC,GAAC,SAAS,CAAC,CAAG,CAAA;WACzS,CAAC,CAAC;AAAA,OACN;KACF;;;;;;;;WAMQ,mBAAC,aAAa,EAAE;AACvB,UAAI,CAAC,UAAU,GAAG,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;AACjD,UAAI,CAAC,OAAO,GAAG,4BAAW,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AACvE,4BAAS,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KACrC;;;WAEE,aAAC,GAAG,EAAE,YAAY,EAAE;AACrB,aAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,YAAY,IAAI,EAAE,CAAC,CAAC;KACvD;;;WACG,cAAC,GAAG,EAAE,IAAI,EAAE;AACd,aAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;KAChD;;;WACE,aAAC,GAAG,EAAE,IAAI,EAAE;AACb,aAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;KAC/C;;;WACK,iBAAC,GAAG,EAAE;AACV,aAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;KACtC;;;SA9DkB,eAAe;;;qBAAf,eAAe","file":"connector.js","sourcesContent":["import logger from '@hoist/logger';\nimport config from 'config';\nimport Trello from 'node-trello';\nimport Bluebird from 'bluebird';\n/*\n * The main class for connecting to Trello\n * @implements {ConnectorInterface}\n */\nexport default class TrelloConnector {\n\n  /**\n   * create a new TrelloConnector\n   * @param {object} configuration - the configuration details for this connector\n   * @param {string} configuration.apiKey - the trello API Key\n   * @param {string} configuration.apiSecret - the trello API secret\n   * @param {string} configuration.appName - the application name as it should show up to the user in Trello\n   */\n  constructor(configuration) {\n    this._logger = logger.child({\n      cls: TrelloConnector\n    })\n    this._configuration = configuration;\n  }\n\n  /**\n   * @param {AuthorizationStore} authorization - the users authorization\n   */\n  receiveBounce(authorization) {\n    let authStep = authorization.get('currentStep')\n    switch (authStep) {\n    case 'bouncing':\n      this._logger.info('returned from trello');\n      return Promise.all([\n          authorization.set('authToken', authorization.query.token),\n          authorization.set('currentStep', 'done')\n        ])\n        .then(() => {\n          return authorization.done();\n        });\n      break;\n    default:\n      this._logger.info('redirecting user to trello');\n      return authorization.set('currentStep', 'bouncing')\n        .then(() => {\n          return authorization.redirect(`https://trello.com/1/connect?key=${this._configuration.apiKey}&name=${encodeURIComponent(this._configuration.appName)}&response_type=token&scope=read,write&expiration=never&return_url=${encodeURIComponent('https://'+config.get('Hoist.domains.bouncer')+'/bounce')}`)\n        });\n    }\n  }\n\n  /**\n   * authorize the oauth connection with existing parameters\n   * @param {<AuthorizationStore>} authorization - the users authorization\n   */\n  authorize(authorization) {\n    this._authToken = authorization.get('authToken');\n    this._trello = new Trello(this._configuration.apiKey, this._authToken);\n    Bluebird.promisifyAll(this._trello);\n  }\n\n  get(url, urlArguments) {\n    return this._trello.getAsync(url, urlArguments || {});\n  }\n  post(url, body) {\n    return this._trello.postAsync(url, body || {});\n  }\n  put(url, body) {\n    return this._trello.putAsync(url, body || {});\n  }\n  delete(url) {\n    return this._trello.deleteAsync(url);\n  }\n}\n"],"sourceRoot":"/source/"}
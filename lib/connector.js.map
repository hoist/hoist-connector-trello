{"version":3,"sources":["connector.js"],"names":[],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AAIA;;;;;;;;;;AAKA,IAAI,YAAY;AACd,mBAAiB,2CAAjB;AACA,kBAAgB,0CAAhB;AACA,oBAAkB,0CAAlB;AACA,gBAAc,KAAd;CAJE;AAMJ,IAAI,UAAU;AACZ,YAAU,OAAV;AACA,YAAU,gBAAV;CAFE;;;;;;;IASiB;;;;;;;;;;;AASnB,WATmB,eASnB,CAAY,aAAZ,EAA2B;0BATR,iBASQ;;AACzB,kBAAc,WAAd,GAA4B,cAAc,MAAd,CADH;AAEzB,kBAAc,cAAd,GAA+B,cAAc,SAAd,CAFN;;uEATR,4BAYX,mBAAM,EAAN,EAAU,aAAV,EAAyB,SAAzB,IAHmB;;AAIzB,UAAK,OAAL,GAAe,iBAAO,KAAP,CAAa;AAC1B,WAAK,eAAL;KADa,CAAf,CAJyB;;GAA3B;;eATmB;;6CAiBM,OAAO;AAC9B,YAAM,IAAN,GAAa,KAAK,cAAL,CAAoB,OAApB,CADiB;AAE9B,YAAM,UAAN,GAAmB,OAAnB,CAF8B;AAG9B,YAAM,KAAN,GAAc,YAAd,CAH8B;AAI9B,aAAO,KAAP,CAJ8B;;;;wBAO5B,MAAM,cAAc;AACtB,UAAI,MAAM,mBAAM,EAAN,EAAU;AAClB,kBAAU,IAAV;AACA,eAAO,YAAP;OAFQ,EAGP,OAHO,CAAN,CADkB;AAKtB,aAAO,KAAK,eAAL,CAAqB,KAArB,EAA4B,cAAI,MAAJ,CAAW,GAAX,CAA5B,EAA6C,EAA7C,EAAiD,IAAjD,CAAsD,UAAC,MAAD,EAAY;AACvE,eAAO,KAAK,KAAL,CAAW,OAAO,CAAP,CAAX,CAAP,CADuE;OAAZ,CAA7D,CALsB;;;;yBASnB,MAAM,MAAM;AACf,UAAI,MAAM,mBAAM,EAAN,EAAU;AAClB,kBAAU,IAAV;OADQ,EAEP,OAFO,CAAN,CADW;AAIf,aAAO,KAAK,eAAL,CAAqB,MAArB,EAA6B,cAAI,MAAJ,CAAW,GAAX,CAA7B,EAA8C,QAAQ,EAAR,CAA9C,CAA0D,IAA1D,CAA+D,UAAC,MAAD,EAAY;AAChF,eAAO,KAAK,KAAL,CAAW,OAAO,CAAP,CAAX,CAAP,CADgF;OAAZ,CAAtE,CAJe;;;;wBAQb,MAAM,MAAM;AACd,UAAI,MAAM,mBAAM,EAAN,EAAU;AAClB,kBAAU,IAAV;OADQ,EAEP,OAFO,CAAN,CADU;AAId,aAAO,KAAK,eAAL,CAAqB,KAArB,EAA4B,cAAI,MAAJ,CAAW,GAAX,CAA5B,EAA6C,QAAQ,EAAR,CAA7C,CAAyD,IAAzD,CAA8D,UAAC,MAAD,EAAY;AAC/E,eAAO,KAAK,KAAL,CAAW,OAAO,CAAP,CAAX,CAAP,CAD+E;OAAZ,CAArE,CAJc;;;;4BAQT,MAAM;AACX,UAAI,MAAM,mBAAM,EAAN,EAAU;AAClB,kBAAU,IAAV;OADQ,EAEP,OAFO,CAAN,CADO;AAIX,aAAO,KAAK,eAAL,CAAqB,QAArB,EAA+B,cAAI,MAAJ,CAAW,GAAX,CAA/B,EAAgD,IAAhD,CAAqD,UAAC,MAAD,EAAY;AACtE,eAAO,KAAK,KAAL,CAAW,OAAO,CAAP,CAAX,CAAP,CADsE;OAAZ,CAA5D,CAJW;;;;SAjDM","file":"connector.js","sourcesContent":["import logger from '@hoist/logger';\nimport config from 'config';\nimport Trello from 'node-trello';\nimport Bluebird from 'bluebird';\nimport url from 'url';\nimport {\n  OAuthConnectorBase\n}\nfrom '@hoist/oauth-connector';\nimport {\n  merge\n}\nfrom 'lodash';\n\nlet overrides = {\n  requestTokenUri: 'https://trello.com/1/OAuthGetRequestToken',\n  accessTokenUri: 'https://trello.com/1/OAuthGetAccessToken',\n  authorizationUri: 'https://trello.com/1/OAuthAuthorizeToken',\n  oauthVersion: '1.0'\n}\nlet baseUri = {\n  protocol: 'https',\n  hostname: 'api.trello.com'\n}\n\n/*\n * The main class for connecting to Trello\n * @extends {OAuthConnectorBase}\n */\nexport default class TrelloConnector extends OAuthConnectorBase {\n\n  /**\n   * create a new TrelloConnector\n   * @param {object} configuration - the configuration details for this connector\n   * @param {string} configuration.apiKey - the trello API Key\n   * @param {string} configuration.apiSecret - the trello API secret\n   * @param {string} configuration.appName - the application name as it should show up to the user in Trello\n   */\n  constructor(configuration) {\n    configuration.consumerKey = configuration.apiKey;\n    configuration.consumerSecret = configuration.apiSecret;\n    super(merge({}, configuration, overrides));\n    this._logger = logger.child({\n      cls: TrelloConnector\n    });\n  }\n  _setupAuthorizationQuery(query) {\n    query.name = this._configuration.appName;\n    query.expiration = \"never\";\n    query.scope = \"read,write\";\n    return query;\n  }\n\n  get(path, urlArguments) {\n    var uri = merge({}, {\n      pathname: path,\n      query: urlArguments\n    }, baseUri);\n    return this._performRequest('GET', url.format(uri), {}).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n  post(path, body) {\n    var uri = merge({}, {\n      pathname: path\n    }, baseUri);\n    return this._performRequest('POST', url.format(uri), body || {}).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n  put(path, body) {\n    var uri = merge({}, {\n      pathname: path\n    }, baseUri);\n    return this._performRequest('PUT', url.format(uri), body || {}).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n  delete(path) {\n    var uri = merge({}, {\n      pathname: path\n    }, baseUri);\n    return this._performRequest('DELETE', url.format(uri)).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n}\n"],"sourceRoot":"/source/"}